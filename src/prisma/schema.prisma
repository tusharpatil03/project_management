// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique @default(cuid())
  email     String   @unique
  password  String
  salt      String
  role      Role
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  // Relations
  projects      Project[]  
  teams         Team[]    @relation("TeamMembers")
  createdTeams  Team[]    @relation("TeamCreator")
  createdTasks  Task[]    @relation("CreatedTasks")
  assignedTasks Task[]    @relation("AssignedTasks")
  sprints       Sprint[]

  @@map("users")
}

model Project {
  id          String        @id @unique @default(cuid())
  name        String
  description String
  creatorId   String        @map("creator_id")
  goal        String?
  plan        String?
  creator     User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  status      ProjectStatus @default(Active)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  teams   Team[]   @relation("ProjectTeams") // Many-to-Many with Teams
  tasks   Task[]   @relation("ProjectTasks")
  sprints Sprint[]

  @@map("projects")
}

model Team {
  id          String   @id @unique @default(cuid())
  name        String?
  creatorId   String   @map("creator_id")
  creator     User     @relation("TeamCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  members  User[]    @relation("TeamMembers") // Many-to-Many with Users
  projects Project[] @relation("ProjectTeams") // Many-to-Many with Projects

  @@map("teams")
}

model Task {
  id          String     @id @unique @default(cuid())
  title       String
  description String
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  dueDate     DateTime  @map("due_date")

  // Relations
  assigneeId String?
  assignee   User?   @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)
  creatorId  String  @map("creator_id")
  creator    User    @relation("CreatedTasks", fields: [creatorId], references: [id], onDelete: Cascade)
  projectId  String  @map("project_id")
  project    Project @relation("ProjectTasks", fields: [projectId], references: [id], onDelete: Cascade)
  sprintId   String? @map("sprint_id")
  sprint     Sprint? @relation(fields: [sprintId], references: [id])

  @@map("tasks")
}

model Sprint {
  id          String       @id @unique @default(cuid())
  title       String
  description String?
  status      SprintStatus @default(Planned)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  dueDate     DateTime?    @map("due_date")

  // Relations
  creatorId String  @map("creator_id")
  creator   User    @relation(fields: [creatorId], references: [id])
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id])
  tasks     Task[]

  @@map("sprints")
}

enum Role {
  Admin
  User
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum SprintStatus {
  Planned
  Active
  Completed
  Cancelled
}

enum ProjectStatus {
  Active
  OnHold
  Completed
  Cancelled
}
